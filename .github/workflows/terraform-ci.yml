name: Terraform CI/CD

on:
  pull_request:
    branches: [ task_4 ]
  push:
    branches: [ task_4 ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  TF_VERSION: '1.12.2'
  AWS_REGION: 'eu-west-1'
  TF_ROLE_ARN: 'arn:aws:iam::155261241825:role/GithubActionsRole' 

jobs:
  terraform-check:
    name: 'Terraform Format'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    # Skip backend init for format/validate checks
    - name: Terraform Init (skip backend)
      id: init
      run: terraform init -backend=false -input=false
      
    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true
      
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          
          *Workflow: \`${{ github.workflow }}\`, Action: \`${{ github.action }}\`, Working Directory: \`${{ github.workspace }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  terraform-plan:
    name: 'Terraform Plan'
    needs: terraform-check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ env.TF_ROLE_ARN }}
        role-session-name: GitHubActions-${{ github.run_id }}
        
    - name: Terraform Init
      run: terraform init -input=false
      
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -input=false -out=tfplan -detailed-exitcode
        PLAN_EXIT_CODE=$?
        case $PLAN_EXIT_CODE in
            0)
              echo "No changes detected"
              touch tfplan
              ;;
            1)
              echo "Error during plan"
              exit 1
              ;;
            2)
              echo "Changes detected"
              ;;
        esac
      continue-on-error: false
      
    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: tfplan
        if-no-files-found: error
        retention-days: 1
        
    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('tfplan', 'utf8');
          
          const output = `#### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${plan}
          \`\`\`
          </details>
          
          *Workflow: \`${{ github.workflow }}\`, Action: \`${{ github.action }}\`, Working Directory: \`${{ github.workspace }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  terraform-apply:
    name: 'Terraform Apply'
    needs: terraform-plan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ env.TF_ROLE_ARN }}
        role-session-name: GitHubActions-${{ github.run_id }} 

    - name: Terraform Init
      id: init
      run: terraform init -input=false

    - name: Download Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: tfplan
        
    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve tfplan
      
    - name: Update GitHub Status
      if: success()
      run: echo "Terraform apply completed successfully!"

  # –ù–æ–≤—ã–π job –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Jenkins
  deploy-jenkins:
    name: 'Deploy Jenkins to Kubernetes'
    needs: terraform-apply  # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ env.TF_ROLE_ARN }}
        role-session-name: GitHubActions-Jenkins-${{ github.run_id }}
        
    - name: Configure kubeconfig
      run: |
        aws eks --region ${{ env.AWS_REGION }} update-kubeconfig \
          --name your-cluster-name
        
    - name: Create Jenkins namespace
      run: kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
      
    - name: Add Jenkins Helm repo
      run: |
        helm repo add jenkins https://charts.jenkins.io
        helm repo update
        
    - name: Deploy Jenkins with Helm
      run: |
        helm upgrade --install jenkins jenkins/jenkins \
          --namespace ${{ env.K8S_NAMESPACE }} \
          --set controller.installPlugins=false \
          --set controller.JCasC.enabled=true \
          --set controller.JCasC.configScripts.job-demo="""
          jobs:
          - script: >
              pipeline {
                agent any
                stages {
                  stage('Hello') {
                    steps {
                      echo 'Hello World'
                    }
                  }
                }
              }
          """ \
          --set persistence.enabled=true \
          --set persistence.size=10Gi \
          --wait
          
    - name: Get Jenkins admin password
      run: |
        echo "Jenkins admin password:"
        kubectl get secret --namespace ${{ env.K8S_NAMESPACE }} jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode
        echo ""
        
    - name: Expose Jenkins service
      run: |
        kubectl expose svc jenkins \
          --namespace ${{ env.K8S_NAMESPACE }} \
          --name jenkins-external \
          --type LoadBalancer \
          --port 80 \
          --target-port 8080
          
    - name: Verify Jenkins deployment
      run: |
        kubectl rollout status deployment/jenkins --namespace ${{ env.K8S_NAMESPACE }}
        kubectl get pods,svc --namespace ${{ env.K8S_NAMESPACE }}
